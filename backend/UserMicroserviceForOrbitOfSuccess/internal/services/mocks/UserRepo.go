// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/Homyakadze14/UserMicroserviceForOrbitOfSuccess/internal/entities"
	mock "github.com/stretchr/testify/mock"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, usr
func (_m *UserRepo) Create(ctx context.Context, usr *entities.UserInfo) (int, error) {
	ret := _m.Called(ctx, usr)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.UserInfo) (int, error)); ok {
		return rf(ctx, usr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.UserInfo) int); ok {
		r0 = rf(ctx, usr)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.UserInfo) error); ok {
		r1 = rf(ctx, usr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, uid
func (_m *UserRepo) Get(ctx context.Context, uid int) (*entities.UserInfo, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entities.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entities.UserInfo, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entities.UserInfo); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, usr
func (_m *UserRepo) Update(ctx context.Context, usr *entities.UserInfo) error {
	ret := _m.Called(ctx, usr)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.UserInfo) error); ok {
		r0 = rf(ctx, usr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
