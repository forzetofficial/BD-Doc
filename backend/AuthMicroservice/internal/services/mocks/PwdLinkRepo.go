// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/Homyakadze14/AuthMicroservice/internal/entities"
	mock "github.com/stretchr/testify/mock"
)

// PwdLinkRepo is an autogenerated mock type for the PwdLinkRepo type
type PwdLinkRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, link
func (_m *PwdLinkRepo) Create(ctx context.Context, link *entities.PwdLink) error {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.PwdLink) error); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, link
func (_m *PwdLinkRepo) Delete(ctx context.Context, link string) error {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *PwdLinkRepo) GetByEmail(ctx context.Context, email string) (*entities.PwdLink, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *entities.PwdLink
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.PwdLink, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.PwdLink); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.PwdLink)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByLink provides a mock function with given fields: ctx, link
func (_m *PwdLinkRepo) GetByLink(ctx context.Context, link string) (*entities.PwdLink, error) {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for GetByLink")
	}

	var r0 *entities.PwdLink
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.PwdLink, error)); ok {
		return rf(ctx, link)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.PwdLink); ok {
		r0 = rf(ctx, link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.PwdLink)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPwdLinkRepo creates a new instance of PwdLinkRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPwdLinkRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *PwdLinkRepo {
	mock := &PwdLinkRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
