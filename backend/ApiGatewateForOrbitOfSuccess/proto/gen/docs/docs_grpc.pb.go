// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0--rc2
// source: docs/docs.proto

package docsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Docs_Create_FullMethodName      = "/Docs/Create"
	Docs_Delete_FullMethodName      = "/Docs/Delete"
	Docs_GetFiltered_FullMethodName = "/Docs/GetFiltered"
	Docs_Search_FullMethodName      = "/Docs/Search"
	Docs_Update_FullMethodName      = "/Docs/Update"
)

// DocsClient is the client API for Docs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocsClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	GetFiltered(ctx context.Context, in *GetFilteredRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
}

type docsClient struct {
	cc grpc.ClientConnInterface
}

func NewDocsClient(cc grpc.ClientConnInterface) DocsClient {
	return &docsClient{cc}
}

func (c *docsClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, Docs_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, Docs_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsClient) GetFiltered(ctx context.Context, in *GetFilteredRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, Docs_GetFiltered_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, Docs_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, Docs_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocsServer is the server API for Docs service.
// All implementations must embed UnimplementedDocsServer
// for forward compatibility.
type DocsServer interface {
	Create(context.Context, *CreateRequest) (*SuccessResponse, error)
	Delete(context.Context, *DeleteRequest) (*SuccessResponse, error)
	GetFiltered(context.Context, *GetFilteredRequest) (*GetResponse, error)
	Search(context.Context, *SearchRequest) (*GetResponse, error)
	Update(context.Context, *UpdateRequest) (*SuccessResponse, error)
	mustEmbedUnimplementedDocsServer()
}

// UnimplementedDocsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDocsServer struct{}

func (UnimplementedDocsServer) Create(context.Context, *CreateRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDocsServer) Delete(context.Context, *DeleteRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDocsServer) GetFiltered(context.Context, *GetFilteredRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiltered not implemented")
}
func (UnimplementedDocsServer) Search(context.Context, *SearchRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedDocsServer) Update(context.Context, *UpdateRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDocsServer) mustEmbedUnimplementedDocsServer() {}
func (UnimplementedDocsServer) testEmbeddedByValue()              {}

// UnsafeDocsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocsServer will
// result in compilation errors.
type UnsafeDocsServer interface {
	mustEmbedUnimplementedDocsServer()
}

func RegisterDocsServer(s grpc.ServiceRegistrar, srv DocsServer) {
	// If the following call pancis, it indicates UnimplementedDocsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Docs_ServiceDesc, srv)
}

func _Docs_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Docs_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docs_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Docs_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docs_GetFiltered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServer).GetFiltered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Docs_GetFiltered_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServer).GetFiltered(ctx, req.(*GetFilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docs_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Docs_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docs_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Docs_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Docs_ServiceDesc is the grpc.ServiceDesc for Docs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Docs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Docs",
	HandlerType: (*DocsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Docs_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Docs_Delete_Handler,
		},
		{
			MethodName: "GetFiltered",
			Handler:    _Docs_GetFiltered_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Docs_Search_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Docs_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "docs/docs.proto",
}
